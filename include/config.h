#pragma once
#include <tuple>

using namespace std;

//must be known at compile time
constexpr int bulletPoolSize = 50;
constexpr int sparkPoolSize = 100;
constexpr int engBallPoolSize = 30;

constexpr int swarmerPoolSize = 20;
//global line thickness
constexpr float defaultLineThickness = 4.0;

//used inside functions
constexpr double pntCollisionPadSpatial = 0;
constexpr double pntCollisionPadTemporal = 0;
constexpr double reallySmall = 1.0e-100;
//min thickness until set to black
constexpr double minLinThickness = 0.1;

constexpr int windowSizeX =  1400;
constexpr int windowSizeY = 800;

constexpr tuple<int,int,int> white = make_tuple(255,255,255);
constexpr tuple<int,int,int> black = make_tuple(0, 0, 0);
constexpr tuple<int,int,int> red = make_tuple(255,0,0);
constexpr tuple<int,int,int> orange = make_tuple(255, 127, 0);
constexpr tuple<int,int,int> blue = make_tuple(0, 0, 255);
constexpr tuple<int,int,int> green = make_tuple(0, 255, 0);
constexpr tuple<int,int,int> violet = make_tuple(127, 0, 255);

struct GunStats{
    double projVel;
    double projVarience;
    double projNum;
    bool fullAuto;
    double coolDown;
    double homingRate;
    //memeber initalization
    void init(double projVel,double projVarience,double projNum,bool fullAuto,double coolDown,double homingRate){
        this->projVel = projVel;
        this->projVarience = projVarience;
        this->projNum = projNum;
        this->fullAuto = fullAuto;
        this->coolDown = coolDown;
        this->homingRate = homingRate;
    }
};

struct Config{
    int fps;

    //calculated
    int mspf;
    double spf;

    void init();
};

//game specific
struct Stats{
    //appearence

    //bullets
        //time in seconds
    double bulletTrailDecay;
        // must be greater than 2
    int bulletTrailSegments;
    double bulletDiameter;
    double riccoBulletVelDamping;
    double bulletVelDamping;
    double bulletMinVel;
    
    //sparks
    double sparkDiameter;
    int sparkTrailSegments;
    double sparkTrailDecay;
    //divides riccochet vel by this to get num sparks
    double riccoSparkSpawnDamping;
    //divides riccochet vel by this to get spark vel (note if bullets are also damped, the effect compounds)
    double riccoSparkVelDamping;
    // max varience in spark velocity when generated by collision
    double riccoSparkVelVarience;
    
    //drag on sparks
    double sparkVelDamping;
    double sparkMinVel;



    //energy ball
    double engBallRotRate;
    double engBallVibrateFreq;
    double engBallVibrateAmplitude;
    double engBallVibePhase;
    //in seconds
    double engBallExpTimer;
    double engBallExpVel;
    //varience is an upper bound
    double engBallExpVelVarience;

    //controls screen motion based on current controls
    double screenVel;
    double screenOffset;
    double defaultZoom;


    //gameplay
    //player
    double plrTopSpeed;
    double plrAcceleration;
    GunStats plrGun;

    // swarmer
    double swarmerTopSpeed;
    double swarmerAcceleration;
    double swarmerDrag;

    void init();
};